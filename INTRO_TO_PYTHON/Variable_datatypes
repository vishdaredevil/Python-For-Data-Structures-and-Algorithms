Introduction to Variables:-
Variables store data in memory and are referenced by names.
Python is dynamically typed, meaning you don't need to declare a type explicitly.
Created by assigning a value using =.

Example:-
x = 5       # Integer
name = "John"  # String
pi = 3.14    # Float
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rules for Naming Variables:-
-> Must start with a letter or underscore (_).
-> Cannot start with a number.
-> Can only contain letters, numbers, and underscores.
-> Case-sensitive.
-> Cannot be a Python keyword.
-> Assigning & Reassigning Variables
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Assigning a single value to multiple variables:-
a = b = c = 10
Changing values:-
x = 10
x = 20
print(x)  # Outputs: 20
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Data Types in Python:-
Python has mutable (changeable) and immutable (unchangeable) types.
-> Numeric: int, float, complex (Immutable)
-> Text: str (Immutable)
-> Boolean: bool (Immutable)
-> Sequence: list (Mutable), tuple (Immutable), range
-> Mapping: dict (Mutable)
-> Set: set (Mutable), frozenset (Immutable)
-> None: NoneType (Immutable)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example of Immutable vs Mutable:

Mutable List:-
my_list = [1, 2, 3]
my_list[0] = 10
print(my_list)  # [10, 2, 3]

Immutable Tuple:-
my_tuple = (1, 2, 3)
my_tuple[0] = 10  # Error!
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Type Conversion:-
Python allows type casting using int(), float(), and str().
Example:
x = 5
y = float(x)  # Convert to float (5.0)
z = str(x)    # Convert to string ("5")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Basic Mathematical Operations:-
-> Addition: + (5 + 3 = 8)
-> Subtraction: - (5 - 3 = 2)
-> Multiplication: * (5 * 3 = 15)
-> Division: / (5 / 2 = 2.5)
-> Floor Division: // (5 // 2 = 2)
-> Modulus: % (5 % 2 = 1)
-> Exponentiation: ** (2 ** 3 = 8)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using the math Module:-
-> import math
print(math.sqrt(16))  # 4.0
print(math.pow(2, 3))  # 8.0
print(math.ceil(3.1))  # 4
print(math.floor(3.9))  # 3
print(math.pi)  # 3.14159...
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Boolean Operations & Comparisons:-
Boolean values: True and False
Logical Operators:
print(True and False)  # False
print(True or False)   # True
print(not True)        # False

Comparison Operators:
print(5 == 5)  # True
print(5 != 6)  # True
print(7 > 5)   # True
print(4 <= 5)  # True

Working with Strings
Strings are enclosed in ' or " and support operations like concatenation, repetition, indexing, and slicing.
name = "Python"
print(name[0])   # 'P'
print(name[-1])  # 'n'
print(name[:4])  # 'Pyth'

String Methods:
text = "hello"
print(text.upper())  # "HELLO"
print(text.lower())  # "hello"
print(text.replace("h", "y"))  # "yello"

Python provides flexible and dynamic handling of variables and data types. Understanding their behavior allows for better memory management, improved efficiency, and more powerful programming.
