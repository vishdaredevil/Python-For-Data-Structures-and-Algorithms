1. Loops are used to repeat a block of code efficiently instead of writing it multiple times.  
2. Every loop has four components: initialization, test expression, update expression, and loop body.  
3. Python provides two primary loops: for loop and while loop.  
4. The for loop iterates over a sequence such as a list, tuple, dictionary, string, or range.  
5. The syntax of a for loop is: for variable in sequence: execute code block.  
6. The range() function is commonly used with for loops and can have one, two, or three arguments.  
7. Nested for loops are used to iterate over complex structures like matrices or patterns.  
8. Example of a for loop:  
   - for i in range(5): print(i)  
   - Outputs: 0, 1, 2, 3, 4  
9. The while loop executes as long as the condition remains True.  
10. The syntax of a while loop is: while condition: execute code block.  
11. The while loop is useful when the number of iterations is unknown.  
12. Example of a while loop:  
   - counter = 0  
   - while counter < 5: print(counter); counter += 1  
   - Outputs: 0, 1, 2, 3, 4  
13. Infinite loops occur when the condition never becomes False, which can freeze the program.  
14. To stop an infinite loop, use Ctrl + C in the terminal or the stop button in IDEs.  
15. The else block can be used with a while loop and executes if the loop ends without a break.  
16. Example of else with while loop:  
   - counter = 0  
   - while counter < 3: print(counter); counter += 1  
   - else: print("Loop completed successfully")  
   - Outputs: 0, 1, 2, "Loop completed successfully"  
17. Nested while loops are used for multi-dimensional data or complex problems.  
18. Example of nested while loops:  
   - i = 0  
   - while i < 3: j = 0  
   - while j < 2: print(f"i={i}, j={j}"); j += 1  
   - i += 1  
   - Outputs multiple values of i and j.  
19. The break statement terminates a loop immediately when a condition is met.  
20. Example of break in a for loop:  
   - for i in range(10): if i == 5: break; print(i)  
   - Outputs: 0, 1, 2, 3, 4  
21. The continue statement skips the current iteration and moves to the next iteration.  
22. Example of continue in a for loop:  
   - for i in range(5): if i == 2: continue; print(i)  
   - Outputs: 0, 1, 3, 4  
23. Example of continue in a while loop:  
   - counter = 0  
   - while counter < 5: counter += 1; if counter == 3: continue; print(counter)  
   - Outputs: 1, 2, 4, 5  
24. The break and continue statements can be combined in a loop for different scenarios.  
25. Example of break and continue in a for loop:  
   - for i in range(10): if i == 5: break; if i % 2 == 0: continue; print(i)  
   - Outputs: 1, 3  
26. In nested loops, break and continue only affect the loop they are written in.  
27. Example of break in nested loops:  
   - for i in range(3): for j in range(3): if j == 2: break; print(f"i={i}, j={j}")  
   - Outputs multiple values of i and j but stops inner loop when j == 2.